[project]
name = "intel-ii"
version = "0.1.0"
description = "Agents API - FastAPI service for multi-agent automation"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "openai>=1.77.0",
    "openai-agents>=0.0.14",
    "pyjwt>=2.10.1",
    "browserbase>=1.3.0",
    "supabase>=2.15.1",
    "browser-use>=0.1.48",
    "langgraph>=0.4.8",
    "langchain[openai]>=0.3.22",
    "langchain-qdrant>=0.2.0",
    "langgraph-supervisor>=0.0.27",
]

[project.scripts]
intel-ii = "Project.main:main"

[dependency-groups]
dev = [
    "langgraph-cli[inmem]>=0.3.3",
    "ruff>=0.12.6",
    "coverage[toml]>=7.10.0",
    "mypy>=1.17.0",
    "bandit>=1.8.0",
    "pre-commit>=4.2.0",
    "radon>=6.0.1",
    "xenon>=0.9.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Hatchling build configuration
[tool.hatch.build.targets.wheel]
packages = ["Project"]
include = [
    "README.md"
]

[tool.hatch.build.targets.sdist]
include = [
    "/Project",
    "/README.md",
    "/pyproject.toml",
]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "C4", "UP"]
ignore = ["E501", "E711", "E712", "E722", "B008", "B024"]
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG", "FBT"]
"**/test_*.py" = ["S101", "PLR2004", "ARG", "FBT"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["Project"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=40",
    "-ra",
    "--tb=short",
    "--import-mode=importlib",
]
testpaths = ["tests"]
pythonpath = ["."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/migrations/*",
    "*/settings.py",
    "*/manage.py",
    "*/asgi.py",
    "*/wsgi.py",
    "*/.env",
    "*/config.py",
    "setup.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.bandit]
exclude_dirs = ["tests", "*/test_*"]
skips = ["B101", "B601"]
